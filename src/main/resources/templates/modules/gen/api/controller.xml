<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/api/${subModuleName}</filePath>
	<fileName>Api${ClassName}Controller.java</fileName>
	<content><![CDATA[
package ${packageName}.${moduleName}.api<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.javafast.common.persistence.Page;
import com.javafast.common.web.BaseController;
import com.javafast.common.utils.DateUtils;
import com.javafast.common.utils.StringUtils;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

/**
 * ${functionName} API Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/api/${urlPrefix}")
public class Api${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	/**
	 * 分页查询列表
	 * @param pageNo 当前页码
	 * @param title
	 * @return
	 */
	@SuppressWarnings("finally")
	@RequestMapping(value = "getList", method = RequestMethod.POST)
	@ResponseBody
	public JSONObject getList(String accountId, String pageNo, HttpServletRequest request, HttpServletResponse response, Model model) {
		
		JSONObject json =new JSONObject();
		json.put("code", "0");
		
		try {
		
			${ClassName} ${className} = new ${ClassName}();	
			${className}.setIsApi(true);
			${className}.setAccountId(accountId);		
			Page<${ClassName}> conPage = new Page<${ClassName}>(request, response);
			conPage.setPageNo(Integer.parseInt(pageNo));
			${className}.setPage(conPage);
			Page<${ClassName}> page = ${className}Service.findPage(conPage, ${className});
			
			if(Integer.parseInt(pageNo) > page.getLast()){
				return null;
			}
			
			json.put("list", page.getList());
			json.put("code", "1");
		} catch (Exception e) {
			json.put("error", "");
			e.printStackTrace();
		} finally {
			return json;
		}
	}
	
	/**
	 * 根据ID查询
	 * @param id
	 * @return
	 */
	@SuppressWarnings("finally")
	@RequestMapping(value = "getById", method = RequestMethod.POST)
	@ResponseBody
	public JSONObject getById(String id) {
	
		JSONObject json =new JSONObject();
		json.put("code", "0");
		try {
			
			${ClassName} entity = ${className}Service.get(id);
			json.put("entity", entity);
			
			json.put("code", "1");
		} catch (Exception e) {
			json.put("code", "404");
			e.printStackTrace();
		} finally {
			return json;
		}
	}
	
	/**
	 * 保存(新增或修改)
	 * @param name
	 * @param accountId
	 * @return
	 */
	@SuppressWarnings("finally")
	@RequestMapping(value = "save", method = RequestMethod.POST)
	@ResponseBody
	public JSONObject save(String id, String name, String accountId) {
	
		JSONObject json =new JSONObject();
		json.put("code", "0");
		try {
			
			${ClassName} ${className};
			
			if(StringUtils.isNotBlank(id)){
				${className} = ${className}Service.get(id);
			}else{
				${className} = new ${ClassName}();
			}
			
			//${className}.setName(name);
			${className}.setAccountId(accountId);
			
			${className}Service.save(${className});
			
			json.put("code", "1");
		} catch (Exception e) {
			json.put("code", "404");
			e.printStackTrace();
		} finally {
			return json;
		}
	}
	
	/**
	 * 根据ID删除
	 * @param id
	 * @return
	 */
	@SuppressWarnings("finally")
	@RequestMapping(value = "delById", method = RequestMethod.POST)
	@ResponseBody
	public JSONObject delById(String id) {
	
		JSONObject json =new JSONObject();
		json.put("code", "0");
		try {
			
			${className}Service.delete(new ${ClassName}(id));
			
			json.put("code", "1");
		} catch (Exception e) {
			json.put("code", "404");
			e.printStackTrace();
		} finally {
			return json;
		}
	}
}]]>
	</content>
</template>